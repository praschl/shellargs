#summary How to customize options generated by autowiring a container class
= Customize autowired options =
When you add a container class to the parser, options are automatically generated for its properties. Each property will generate an option with the name of the property. Options are generated for all properties which
  * have a getter
  * have a setter or are of a type which implements {{{ICollection<T>}}}
  * do not have the {{{[IgnoreOptionAttribute]}}} set
  
Getters and setters may be private, protected or internal. If the property's type implements {{{ICollection<T>}}}, you may completely remove the setter, in which case the property must be initialized to an empty collection by the constructor.

The generated options can be customized by attaching the following .NET attributes to the properties
|| {{{[OptionAttribute]}}} || change the name of the option ||
|| {{{[AliasesAttribute]}}} || add aliases to the option ||
|| {{{[PositionAttribute]}}} || make the option positional ||
|| {{{[RequiredAttribute]}}} || make the option required ||
|| {{{[ValueDescriptionAttribute]}}} || add a short description for the options value ||
|| {{{[IgnoreOptionAttribute]}}} || do not generate an option from this property ||

By default, an option has the same name as the property. To rename the option use the {{{[Option("newName")]}}}.
Aliases can be added to the option by adding {{{[Aliases("a1", "a2")]}}}

The options name and aliases are all case insensitive.

Make the option positional with {{{[Position(1)]}}}. The option can then be used as first argument without specifying the name of the option. Positions must start at 1 and be numbered sequentially.

{{{[Required]}}} makes the option required. The used must specify a value for it.

The description of an option is the type of the property or - if the option is an enum - the possible enum values. This may not be descriptive enough for the user to guess what he should pass. Override the description text with {{{[ValueDescription("filename")]}}} makes it much easier for the user to guess than just "string".

All properties can be combined to customize the option:
{{{
  [Option("filename")]
  [Aliases("f")]
  [Position(1)]
  [Required]
  [ValueDescription("input file")]
  public string File {get; private set; }
}}}
