#summary Types supported by the Parser, and how to add support for custom types.
= Types supported by the parser =
By default, the parser supports all types which can be converted by {{{Convert.ChangeType(object value, Type conversionType)}}}.

== System types ==
This includes the following types
  * {{{System.String}}}
  * {{{System.Char}}}
  * {{{System.Int16}}}
  * {{{System.Int32}}}
  * {{{System.Int64}}}
  * {{{System.UInt16}}}
  * {{{System.UInt32}}}
  * {{{System.UInt64}}}
  * {{{System.Boolean}}}
  * {{{System.Single}}}
  * {{{System.Double}}}

== Enums ==
The parser can convert Enums from numbers or the Enum names (case insensitive). {{{[Flags]}}} enums are supported and can be parsed from comma separated strings.

== Nullable`<T>` ==  
All value types may be used with {{{Nullable<T>}}}, this does NOT affect if a generated option is required.

== Custom types ==
To add support from custom types
  * derive from {{{MiP.ShellArgs.StringConversion.StringParser<TTarget>}}} (recommended) or 
  * implement {{{MiP.ShellArgs.StringConversion.IStringParser<out TTarget>}}}
  * add the type or an instance of it to the {{{MiP.ShellArgs.ParserSettings}}}

The easiest way is to derive from {{{StringParser<TTarget>}}}. There is only the {{{ValueDescription}}} property and the {{{TTarget Parse(string value)}}} method to override.

{{{ValueDescription}}} may return null. If it does not, it's value will take precedence over the default value description. The description can still be overridden with the {{{[ValueDescriptionAttribute]}}} or the {{{ValueDescription(string)}}} method of the fluent api.
